defmodule AdventOfCode.Day05 do
  def part1(args) do
    IO.puts(args)
    parse(args)
  end

  def part2(_args) do
  end

  @doc """
    iex> AdventOfCode.Day05.parse("    [D]    \\n[N] [C]    \\n[Z] [M] [P]\\n 1   2   3 \\n\\n  move 1 from 2 to 1\\n  move 3 from 1 to 3\\n  move 2 from 2 to 1\\n  move 1 from 1 to 2\\n")
    [3,5,7]
  """
  def parse(args) do
    # split into first part / second part
    [crates, instructions] = String.split(args, "\n\n")
    # split first part into arrays of just characters
    rows =
      crates
      |> String.split("\n")
      |> Enum.map(fn row ->
        String.to_charlist(row)
        |> Stream.chunk_every(4)
        |> Stream.map(fn crate -> String.replace(to_string(crate), ~r/[^a-zA-Z0-9]/, "") end)
      end)
    columns = List.last(rows) |> Enum.filter(fn x -> x != "" end)
    limit = List.last(columns)
    stack_map = Enum.reduce(1..String.to_integer(limit), [], fn x, acc -> [[] | acc] end)   rows
    |> Stream.with_index()
    |> Enum.reduce([], fn {crate, index}, acc ->
        Map.update(acc, index + 1, [crate], fn current_value -> [crate | current_value] end)
      end)

        # range = Range.new(3, limit, 2)

    rows
    # split second part into instructions array
  end
end
